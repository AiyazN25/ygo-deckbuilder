{"version":3,"sources":["components/LeftHeader/LeaftHeader.js","components/CardViewer/CardViewer.js","components/SearchBar/SearchBar.js","components/CardsSection/SortButton/SortButton.js","components/CardsSection/ClearButton/ClearButton.js","components/CardsSection/CardsSection.js","components/CardActions/CardAction/CardAction.js","components/CardActions/CardActions.js","components/DeckControl/DeckControl.js","assets/exampleCards.js","components/AllCardsControl/AllCardsControl.js","components/CreditsBox/CreditsBox.js","components/Modals/ClearWarning.js","components/Modals/TestHand.js","components/Modals/EnlargedCard.js","App.js","serviceWorker.js","index.js"],"names":["leftHeader","props","react_default","a","createElement","Container_default","Card_default","bg","text","Header","className","Image_default","src","fluid","Body","Title","style","marginTop","Button","variant","onClick","clickedTestHand","backgroundColor","padding","cardViewer","cardData","width","height","maxHeight","Img","cursor","onCardImgClick","position","length","fontSize","marginBottom","overflowY","bottom","searchBar","Form_default","Control","size","onChange","e","onFilter","inWhichDeckControl","inWhichCardSection","inWhichCardsSection","searchFilterValue","target","value","type","placeholder","sortButton","Button_default","onSortButtonClicked","block","clearButton","console","log","onClearButtonClicked","cardTypes","Main","Side","Extra","extraDeckTypes","cardsSection","allYGOCardsArray","i","totalCardsShownLimit","Infinity","_loop","card","cards","cardIndex","typeOfCardSectionIsSide","typeOfCardSectionIsExtraAndCardTypeIsAlsoExtra","includes","typeOfCardSectionIsMainAndCardTypeIsAlsoMain","cardShouldRemainAfterFilterSearch","toLowerCase","cardListItem","ListGroup_default","Item","as","onCardClick","key","action","push","Row_default","Col_default","xs","isClearable","title","isSearchable","SearchBar","filterCardsInSectionHandler","isSortable","SortButton","sortCardsInSectionHandler","ClearButton","clearWarningModalOpenHandler","overflow","cardAction","cardActionData","minHeight","margin","cardActions","map","CardAction","deckControl","border","CardsSection","fullDeckData","main","index","cardClicked","mainSearchFilterValue","numCards","side","sideSearchFilterValue","extra","extraSearchFilterValue","CardViewer","enlargedCardModalOpenHandler","currentViewedCard","CardActions","inWhichCardSectionCurrentCardViewedIs","genericActionHandler","sendToHandler","actionHandler","exampleCards","id","name","desc","atk","def","level","race","attribute","scale","linkval","linkmarkers","archetype","set_tag","setcode","ban_tcg","ban_ocg","ban_goat","image_url","AllCardsControl","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","then","response","json","setState","allCards","handleCardClick","handleFilter","searchObj","showingSomeOfAllCardsTitle","state","_this2","top","left","Component","getCardIdArray","cardArray","getDeckControlObjWithCardIdsOnly","deckControlObj","creditsBox","deckAndTrunkData","deck","trunk","deckAndTrunkString","JSON","stringify","href","encodeURIComponent","download","display","onDataUpload","accept","clearWarning","Modal_default","assign","aria-labelledby","centered","closeButton","Footer","onHide","onClearButtonClick","whatWillBeCleared","whichDeckControl","whichCardsSection","testHand","cardsArray","totalCardsToShow","Math","min","numCardsToShow","alt","show","onDraw","enlargedCard","cardImg","App","componentDidUpdate","handleSendingCard","toWhichDeckControl","toWhichCardSection","fromWhichDeckControl","fromWhichCardSection","prevState","toModifiedDeckControl","objectSpread","toModifiedCardsSection","toConsumableArray","defineProperty","fromModifiedDeckControl","fromModifiedCardsSection","indexOfCardToRemove","currentViewedCardIndex","splice","_ref3","handleCardClicked","modifiedDeckControl","handleCardsSectionSorting","modifiedCardsSection","sort","b","handleCardsSectionClearing","_ref6","handleCardsSectionFiltering","handleClosingClearWarningModal","showClearWarningModal","handleOpeningClearWarningModal","handleClosingTestHandModal","showTestHandModal","numCardsToShowInTestHand","handleOpeningTestHandModal","sampleHand","random","handleClosingEnlargedCardModal","showEnlargedCardModal","handleOpeningEnlargedCardModal","cardImgUrl","enlargedCardToShow","handleCardDraw","handleDeckAndTrunkDataUpload","persist","uploadedFile","files","match","Error","reader","FileReader","onload","uploadedTextFile","parse","result","modifiedPrevState","modifiedTrunk","modifiedDeck","cardId","find","cardObj","readAsText","showUploadFailAlert","handleUploadAlertShow","handleUploadAlertHide","LeaftHeader","DeckControl","mainDeckLimit","sideDeckLimit","extraDeckLimit","CreditsBox","es_Container","Alert_default","dismissible","onClose","components_AllCardsControl_AllCardsControl","ClearWarning","TestHand","EnlargedCard","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2281e6f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\nconst leftHeader = (props) => (\r\n    \r\n    <Container>            \r\n        <Card bg=\"dark\" text=\"white\" >\r\n            <Card.Header className=\"text-center\">\r\n                <Image src=\"https://upload.wikimedia.org/wikipedia/commons/1/11/Yu-Gi-Oh%21_%28Logo%29.jpg\" fluid></Image>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Card.Title>Yugioh Deck Builder App</Card.Title>\r\n                    Build a deck and do test draws!\r\n                    <div style={{marginTop: '6px'}} className=\"text-right\">\r\n                        <Button variant=\"primary\" onClick={props.clickedTestHand}>Test Hand</Button> \r\n                    </div>\r\n                    <hr style={{backgroundColor: 'white'}}/>\r\n                    <h6>Instructions</h6>\r\n                    <ul style={{padding: '0'}}>\r\n                        <li>You can search for any card on the far right panel and add it to your deck or trunk.</li>\r\n                        <li>Your trunk is where you can keep cards you're interested in putting in your deck, for later.</li>\r\n                        <li>Click a card name to view its info.</li>\r\n                    </ul>\r\n            </Card.Body>\r\n        </Card>\r\n    </Container>\r\n    \r\n)\r\n\r\nexport default leftHeader;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\nconst cardViewer = (props) => {\r\n    if (props.cardData)\r\n        return <Card style={{ width: '100%', height: '100%', maxHeight: '450px' }}>\r\n            <Card.Img\r\n                style={{cursor: 'pointer'}}\r\n                onClick={() => props.onCardImgClick(props.cardData['image_url'])}\r\n                variant=\"top\"\r\n                src={props.cardData['image_url']} />\r\n            <Card.Body style={{ padding: '5px', position: 'relative' }}>\r\n                <h6 style={props.cardData['name'].length >= 40 ? { fontSize: '13px', marginBottom: '0px' } : {}} className={'text-center'}>{props.cardData['name']}</h6>\r\n                <div ><i>Description:</i></div>\r\n                <div style={{ overflowY: 'auto', height: '100px' }}>\r\n                    <p style={{ fontSize: '10px' }}>{props.cardData[\"desc\"]}</p>\r\n                </div>\r\n                <div style={{ fontSize: '14px', position: 'absolute', bottom: '2px', maxHeight: '63px', overflowY: 'auto' }}>\r\n                    {props.cardData['atk'] ? (<span> <strong>ATK:</strong> {' ' + props.cardData['atk']} </span>) : null}\r\n                    {props.cardData['def'] ? (<span> <strong>DEF:</strong> {' ' + props.cardData['def']} </span>) : null}\r\n                    {props.cardData['race'] ? (<span> <strong> {props.cardData['race'] + ' ' + props.cardData['type']} </strong> </span>) : null}\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    else return null;\r\n}\r\n\r\n\r\nexport default cardViewer;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst searchBar = (props) => (\r\n    <Form.Control \r\n    style={props.style} \r\n    size=\"sm\" \r\n    onChange={(e) => props.onFilter({\r\n        inWhichDeckControl: props.inWhichDeckControl, \r\n        inWhichCardSection: props.inWhichCardsSection, \r\n        searchFilterValue: e.target.value\r\n    })} \r\n    type=\"text\" \r\n    placeholder=\"Search\" \r\n    className=\"mr-sm-2\" \r\n    />\r\n)\r\n\r\nexport default searchBar;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst sortButton = (props) => (\r\n    <Button \r\n    onClick={() => props.onSortButtonClicked(props.inWhichDeckControl, props.inWhichCardsSection)} \r\n    block \r\n    size='sm' \r\n    style={props.style} \r\n    variant=\"light\">Sort</Button>\r\n)\r\n\r\nexport default sortButton","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst clearButton = (props) => (\r\n    <Button \r\n    onClick={() => {console.log(props.inWhichDeckControl, props.inWhichCardsSection); return props.onClearButtonClicked(props.inWhichDeckControl, props.inWhichCardsSection)}} \r\n    size='sm' style={props.style} \r\n    variant=\"danger\">Clear\r\n    </Button>\r\n);\r\n\r\nexport default clearButton;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SortButton from './SortButton/SortButton'\r\nimport ClearButton from './ClearButton/ClearButton'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nconst cardTypes = {\r\n    Main: 'primary',\r\n    Side: 'success',\r\n    Extra: 'secondary'\r\n}\r\n\r\nconst extraDeckTypes = [\"Synchro Monster\", \"Fusion Monster\", \"XYZ Monster\", \"Link Monster\"];\r\n\r\nconst cardsSection = (props) => {\r\n    const allYGOCardsArray = [];\r\n    let i=0;\r\n    let totalCardsShownLimit = props.totalCardsShownLimit ? props.totalCardsShownLimit : Infinity\r\n    // Will only show first totalCardsShownLimit (150 for AllCardsControl, Infinity for DeckControl) cards of each search\r\n    while(allYGOCardsArray.length < totalCardsShownLimit && i < props.cards.length){\r\n        let card = props.cards[i];\r\n        let cardIndex = i; // to prevent the props.onCardClick function calls in the loop refer to the same lexical environment\r\n        // render a card iff if it belongs in the section (i.e: for example \r\n        // it's a synchro card in the extra deck section, push it to the cards array)\r\n        // and if it should remain after filter search. Ofc any kind of card can go into a Side Deck.\r\n        const typeOfCardSectionIsSide = props.type === \"Side\";\r\n        const typeOfCardSectionIsExtraAndCardTypeIsAlsoExtra = props.type === \"Extra\" && extraDeckTypes.includes(card['type']);\r\n        const typeOfCardSectionIsMainAndCardTypeIsAlsoMain = props.type === \"Main\" && !extraDeckTypes.includes(card['type']);\r\n        const cardShouldRemainAfterFilterSearch = card[\"name\"].toLowerCase().includes(props.searchFilterValue.toLowerCase());\r\n        const shouldRenderCard = typeOfCardSectionIsSide || \r\n        ((typeOfCardSectionIsExtraAndCardTypeIsAlsoExtra || typeOfCardSectionIsMainAndCardTypeIsAlsoMain) && cardShouldRemainAfterFilterSearch)\r\n        if(shouldRenderCard){\r\n            let cardListItem = \r\n            <ListGroup.Item\r\n                as=\"button\"\r\n                onClick={() => props.onCardClick(card, cardIndex)}\r\n                variant=\"light\"\r\n                key={card[\"id\"] + cardIndex}\r\n                style={{ padding: '4px' }}\r\n                action >\r\n                {card[\"name\"]}\r\n            </ListGroup.Item>\r\n            allYGOCardsArray.push(cardListItem)\r\n        }\r\n        i++;\r\n    }\r\n    return (\r\n        <Card style={props.style} bg={cardTypes[props.type]} text=\"white\" >\r\n            <Card.Header style={{ fontSize: '15px' }}>\r\n                <Row>\r\n                    <Col xs={!props.isClearable ? 12 : 5}>\r\n                        {props.title(allYGOCardsArray.length)}\r\n                </Col>\r\n                    {props.isSearchable &&\r\n                        <Col xs={3}>\r\n                            <SearchBar \r\n                            inWhichDeckControl={props.inWhichDeckControl}\r\n                            inWhichCardsSection={props.type.toLowerCase()}\r\n                            onFilter={props.filterCardsInSectionHandler}\r\n                            />\r\n                        </Col>}\r\n                    {props.isSortable &&\r\n                        <Col xs={2}>\r\n                            <SortButton \r\n                            inWhichDeckControl={props.inWhichDeckControl}\r\n                            inWhichCardsSection={props.type.toLowerCase()}\r\n                            onSortButtonClicked={props.sortCardsInSectionHandler}\r\n                            />\r\n                        </Col>}\r\n                    {props.isClearable &&\r\n                        <Col xs={2}>\r\n                            <ClearButton \r\n                            inWhichDeckControl={props.inWhichDeckControl}\r\n                            inWhichCardsSection={props.type.toLowerCase()}\r\n                            onClearButtonClicked={props.clearWarningModalOpenHandler}\r\n                            />\r\n                        </Col>}\r\n                </Row>\r\n            </Card.Header>\r\n            <Card.Body style={{ padding: '10px', overflow: 'scroll' }}>\r\n                <ListGroup >\r\n                    {allYGOCardsArray}\r\n                </ListGroup>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default cardsSection;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst cardAction = (props) => (\r\n    <Button \r\n    onClick={props.cardActionData['actionHandler']}\r\n    style={{minHeight: '44%', margin: '3px', width: '45%', fontSize: '10px'}} \r\n    variant={props.cardActionData['text'] ==='Delete' ? \"danger\" : \"dark\"}>\r\n        {props.cardActionData['text']}\r\n    </Button>\r\n)\r\n\r\nexport default cardAction;","import React from 'react';\r\nimport CardAction from './CardAction/CardAction';\r\n\r\nconst cardActions = (props) => (\r\n    <div style={{width: '100%', height: '100px'}}>\r\n        {props.cardActions.map((cardAction) => (\r\n            <CardAction key={cardAction['text']} cardActionData={cardAction}/>\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default cardActions","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CardViewer from '../CardViewer/CardViewer';\r\nimport CardsSection from '../CardsSection/CardsSection';\r\nimport CardActions from '../CardActions/CardActions';\r\n\r\nconst extraDeckTypes = [\"Synchro Monster\", \"Fusion Monster\", \"XYZ Monster\", \"Link Monster\"];\r\n\r\nconst getCardActions = function (inWhichDeckControl, inWhichCardSection, genericActionHandler, currentViewedCard) {\r\n    // console.log(inWhichDeckControl, inWhichCardSection, currentViewedCard)\r\n    let cardActions;\r\n    if (inWhichDeckControl === 'deck') {\r\n        if (inWhichCardSection === 'main') {\r\n            cardActions = [\r\n                { text: 'To Side Deck', actionHandler: () => genericActionHandler('deck', 'side', currentViewedCard, 'deck', 'main') },\r\n                { text: 'To Main Trunk', actionHandler: () => genericActionHandler('trunk', 'main', currentViewedCard, 'deck', 'main') },\r\n                { text: 'To Side Trunk', actionHandler: () => genericActionHandler('trunk', 'side', currentViewedCard, 'deck', 'main') },\r\n                { text: 'Delete', actionHandler: () => genericActionHandler(null, null, currentViewedCard, 'deck', 'main') }\r\n            ]\r\n        }\r\n        else if (inWhichCardSection === 'side') {\r\n            cardActions = [\r\n                (!extraDeckTypes.includes(currentViewedCard['type']) ?\r\n                    { text: 'To Main Deck', actionHandler: () => genericActionHandler('deck', 'main', currentViewedCard, 'deck', 'side') }\r\n                    :\r\n                    { text: 'To Extra Deck', actionHandler: () => genericActionHandler('deck', 'extra', currentViewedCard, 'deck', 'side') }\r\n                ),\r\n                (!extraDeckTypes.includes(currentViewedCard['type']) ?\r\n                    { text: 'To Main Trunk', actionHandler: () => genericActionHandler('trunk', 'main', currentViewedCard, 'deck', 'side') }\r\n                    :\r\n                    { text: 'To Extra Trunk', actionHandler: () => genericActionHandler('trunk', 'main', currentViewedCard, 'deck', 'side') }\r\n                ),\r\n                { text: 'To Side Trunk', actionHandler: () => genericActionHandler('trunk', 'side', currentViewedCard, 'deck', 'side') },\r\n                { text: 'Delete', actionHandler: () => genericActionHandler(null, null, currentViewedCard, 'deck', 'side') }\r\n            ]\r\n        }\r\n        else {\r\n            //inWhichCardSection === 'extra'\r\n            cardActions = [\r\n                { text: 'To Side Deck', actionHandler: () => genericActionHandler('deck', 'side', currentViewedCard, 'deck', 'extra') },\r\n                { text: 'To Extra Trunk', actionHandler: () => genericActionHandler('trunk', 'extra', currentViewedCard, 'deck', 'extra') },\r\n                { text: 'To Side Trunk', actionHandler: () => genericActionHandler('trunk', 'side', currentViewedCard, 'deck', 'extra') },\r\n                { text: 'Delete', actionHandler: () => genericActionHandler(null, null, currentViewedCard, 'deck', 'extra') }\r\n            ]\r\n        }\r\n    }\r\n    else {\r\n        // inWhichDeckControl === 'trunk'\r\n        if (inWhichCardSection === 'main') {\r\n            cardActions = [\r\n                { text: 'To Side Trunk', actionHandler: () => genericActionHandler('trunk', 'side', currentViewedCard, 'trunk', 'main') },\r\n                { text: 'To Main Deck', actionHandler: () => genericActionHandler('deck', 'main', currentViewedCard, 'trunk', 'main') },\r\n                { text: 'To Side Deck', actionHandler: () => genericActionHandler('deck', 'side', currentViewedCard, 'trunk', 'main') },\r\n                { text: 'Delete', actionHandler: () => genericActionHandler(null, null, currentViewedCard, 'trunk', 'main') }\r\n            ]\r\n        }\r\n        else if (inWhichCardSection === 'side') {\r\n            cardActions = [\r\n                (!extraDeckTypes.includes(currentViewedCard['type']) ?\r\n                    { text: 'To Main Trunk', actionHandler: () => genericActionHandler('trunk', 'main', currentViewedCard, 'trunk', 'side') }\r\n                    :\r\n                    { text: 'To Extra Trunk', actionHandler: () => genericActionHandler('trunk', 'extra', currentViewedCard, 'trunk', 'side') }\r\n                ),\r\n                (!extraDeckTypes.includes(currentViewedCard['type']) ?\r\n                    { text: 'To Main Deck', actionHandler: () => genericActionHandler('deck', 'main', currentViewedCard, 'trunk', 'side') }\r\n                    :\r\n                    { text: 'To Extra Deck', actionHandler: () => genericActionHandler('deck', 'main', currentViewedCard, 'trunk', 'side') }\r\n                ),\r\n                { text: 'To Side Deck', actionHandler: () => genericActionHandler('deck', 'side', currentViewedCard, 'trunk', 'side') },\r\n                { text: 'Delete', actionHandler: () => genericActionHandler(null, null, currentViewedCard, 'trunk', 'side') }\r\n            ]\r\n        }\r\n        else {\r\n            //inWhichCardSection === 'Extra'\r\n            cardActions = [\r\n                { text: 'To Side Trunk', actionHandler: () => genericActionHandler('trunk', 'side', currentViewedCard, 'trunk', 'extra') },\r\n                { text: 'To Extra Deck', actionHandler: () => genericActionHandler('deck', 'extra', currentViewedCard, 'trunk', 'extra') },\r\n                { text: 'To Side Deck', actionHandler: () => genericActionHandler('deck', 'side', currentViewedCard, 'trunk', 'extra') },\r\n                { text: 'Delete', actionHandler: () => genericActionHandler(null, null, currentViewedCard, 'trunk', 'extra') }\r\n            ]\r\n        }\r\n    }\r\n    return cardActions;\r\n}\r\n\r\nconst deckControl = (props) => {\r\n\r\n    return <Card border=\"success\" style={{ width: '100%', height: '660px', marginTop: '10px' }}>\r\n        <Card.Header>{props.title}</Card.Header>\r\n        <Card.Body>\r\n            <Row style={{ height: '575px' }}>\r\n                <Col style={{ height: '100%' }} xs={9}>\r\n                    <CardsSection\r\n                        inWhichDeckControl={props.title.toLowerCase()}\r\n                        cards={props.fullDeckData.main}\r\n                        onCardClick={(card, index) => props.cardClicked(props.title.toLowerCase(), card, index, 'main')}\r\n                        isSortable\r\n                        sortCardsInSectionHandler={props.sortCardsInSectionHandler}\r\n                        isSearchable\r\n                        filterCardsInSectionHandler={props.filterCardsInSectionHandler}\r\n                        searchFilterValue={props.fullDeckData.mainSearchFilterValue}\r\n                        isClearable\r\n                        clearWarningModalOpenHandler={props.clearWarningModalOpenHandler}\r\n                        style={{ width: '100%', height: '37%', marginTop: '2%' }}\r\n                        type=\"Main\"\r\n                        title={(numCards) => 'Main Deck Cards ' + numCards} />\r\n                    <CardsSection\r\n                        inWhichDeckControl={props.title.toLowerCase()}\r\n                        cards={props.fullDeckData.side}\r\n                        onCardClick={(card, index) => props.cardClicked(props.title.toLowerCase(), card, index, 'side')}\r\n                        isSortable\r\n                        sortCardsInSectionHandler={props.sortCardsInSectionHandler}\r\n                        isSearchable\r\n                        filterCardsInSectionHandler={props.filterCardsInSectionHandler}\r\n                        searchFilterValue={props.fullDeckData.sideSearchFilterValue}\r\n                        isClearable\r\n                        clearWarningModalOpenHandler={props.clearWarningModalOpenHandler}\r\n                        style={{ width: '100%', height: '27%', marginTop: '2%' }}\r\n                        type=\"Side\"\r\n                        title={(numCards) => 'Side Deck Cards ' + numCards} />\r\n                    <CardsSection\r\n                        inWhichDeckControl={props.title.toLowerCase()}\r\n                        cards={props.fullDeckData.extra}\r\n                        onCardClick={(card, index) => props.cardClicked(props.title.toLowerCase(), card, index, 'extra')}\r\n                        isSortable\r\n                        sortCardsInSectionHandler={props.sortCardsInSectionHandler}\r\n                        isSearchable\r\n                        filterCardsInSectionHandler={props.filterCardsInSectionHandler}\r\n                        searchFilterValue={props.fullDeckData.extraSearchFilterValue}\r\n                        isClearable\r\n                        clearWarningModalOpenHandler={props.clearWarningModalOpenHandler}\r\n                        style={{ width: '100%', height: '27%', marginTop: '2%' }}\r\n                        type=\"Extra\"\r\n                        title={(numCards) => 'Extra Deck Cards ' + numCards} />\r\n                </Col>\r\n                <Col style={{ height: '100%' }} xs={3}>\r\n                    <CardViewer\r\n                        onCardImgClick={props.enlargedCardModalOpenHandler}\r\n                        cardData={props.fullDeckData.currentViewedCard} />\r\n                    <CardActions\r\n                        cardActions={props.fullDeckData.inWhichCardSectionCurrentCardViewedIs ?\r\n                            getCardActions(\r\n                                props.title.toLowerCase(),\r\n                                props.fullDeckData.inWhichCardSectionCurrentCardViewedIs,\r\n                                props.sendToHandler,\r\n                                props.fullDeckData.currentViewedCard\r\n                            ) : []\r\n                        } />\r\n                </Col>\r\n            </Row>\r\n        </Card.Body>\r\n    </Card>\r\n}\r\n\r\n\r\nexport default deckControl","const exampleCards = function() {\r\n    return [\r\n        {\"id\":\"10000020\",\"name\":\"Slifer the Sky Dragon\",\"desc\":\"Requires 3 Tributes to Normal Summon (cannot be Normal Set). This card's Normal Summon cannot be negated. When Normal Summoned, cards and effects cannot be activated. Once per turn, during the End Phase, if this card was Special Summoned: Send it to the Graveyard. This card gains 1000 ATK and DEF for each card in your hand. If a monster(s) is Normal or Special Summoned to your opponent's field in face-up Attack Position: That monster(s) loses 2000 ATK, then if its ATK has been reduced to 0 as a result, destroy it.\",\"atk\":\"0\",\"def\":\"0\",\"type\":\"Effect Monster\",\"level\":\"10\",\"race\":\"Divine-Beast\",\"attribute\":\"DIVINE\",\"scale\":null,\"linkval\":null,\"linkmarkers\":null,\"archetype\":null,\"set_tag\":\"MVP1-EN057,CT13-EN001,LDK2-ENS01,MVP1-ENG57,BP02-EN127,PGLD-EN032,JMPS-EN005,JUMP-EN061,\",\"setcode\":\"Yu-Gi-Oh! The Dark Side of Dimensions Movie Pack,2016 Mega-Tins,Legendary Decks II,Yu-Gi-Oh! The Dark Side of Dimensions Movie Pack: Gold Edition,Battle Pack 2: War of the Giants,Premium Gold,WSJ Jump Pack Fall 2017 promotional card,Weekly Shonen Jump Alpha July 2012 membership promotional card,\",\"ban_tcg\":null,\"ban_ocg\":null,\"ban_goat\":null, 'image_url': 'https://ygoprodeck.com/pics/10000020.jpg'},\r\n        {\"id\":\"10000000\",\"name\":\"Obelisk the Tormentor\",\"desc\":\"Requires 3 Tributes to Normal Summon (cannot be Normal Set). This card's Normal Summon cannot be negated. When Normal Summoned, cards and effects cannot be activated. Cannot be targeted by Spells, Traps, or card effects. Once per turn, during the End Phase, if this card was Special Summoned: Send it to the Graveyard. You can Tribute 2 monsters; destroy all monsters your opponent controls. This card cannot declare an attack the turn this effect is activated.\",\"atk\":\"4000\",\"def\":\"4000\",\"type\":\"Effect Monster\",\"level\":\"10\",\"race\":\"Divine-Beast\",\"attribute\":\"DIVINE\",\"scale\":null,\"linkval\":null,\"linkmarkers\":null,\"archetype\":null,\"set_tag\":\"LDK2-ENS02,BP01-EN021,CT13-EN002,BP01-EN021,MVPC-EN001,MVPC-EN001,GLD4-EN030,BP02-EN125,JUMP-EN037,PGLD-EN030,JMPS-EN004,\",\"setcode\":\"Legendary Decks II,Battle Pack: Epic Dawn,2016 Mega-Tins,Battle Pack: Epic Dawn,Yu-Gi-Oh! The Dark Side of Dimensions Theater distribution cards,Yu-Gi-Oh! The Dark Side of Dimensions Blu-ray & DVD promotional card,Gold Series 4: Pyramids Edition,Battle Pack 2: War of the Giants,Shonen Jump Vol. 8, Issue 1 promotional card,Premium Gold,WSJ Jump Pack Spring 2017 promotional card,\",\"ban_tcg\":null,\"ban_ocg\":null,\"ban_goat\":null, 'image_url': 'https://ygoprodeck.com/pics/10000000.jpg'},\r\n        {\"id\":\"10000010\",\"name\":\"The Winged Dragon of Ra\",\"desc\":\"Cannot be Special Summoned. Requires 3 Tributes to Normal Summon (cannot be Normal Set). This card's Normal Summon cannot be negated. When Normal Summoned, other cards and effects cannot be activated. When this card is Normal Summoned: You can pay LP so that you only have 100 left; this card gains ATK and DEF equal to the amount of LP paid. You can pay 1000 LP, then target 1 monster on the field; destroy that target.\",\"atk\":\"0\",\"def\":\"0\",\"type\":\"Effect Monster\",\"level\":\"10\",\"race\":\"Divine-Beast\",\"attribute\":\"DIVINE\",\"scale\":null,\"linkval\":null,\"linkmarkers\":null,\"archetype\":null,\"set_tag\":\"ORCS-ENSE2,JUMP-EN045,LDK2-ENS03,BP02-EN126,PGLD-EN031,JMPS-EN006,\",\"setcode\":\"Order of Chaos: Special Edition,Shonen Jump Vol. 9, Issue 1 promotional card,Legendary Decks II,Battle Pack 2: War of the Giants,Premium Gold,WSJ Jump Pack Spring 2018 promotional card,\",\"ban_tcg\":null,\"ban_ocg\":null,\"ban_goat\":null, 'image_url': 'https://ygoprodeck.com/pics/10000010.jpg'}\r\n    ]\r\n}\r\n\r\nexport default exampleCards","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CardActions from '../CardActions/CardActions'\r\nimport CardsSection from '../CardsSection/CardsSection';\r\nimport CardViewer from '../CardViewer/CardViewer';\r\nimport exampleCards from '../../assets/exampleCards';\r\n\r\nconst extraDeckTypes = [\"Synchro Monster\", \"Fusion Monster\", \"XYZ Monster\", \"Link Monster\"];\r\n\r\nclass AllCardsControl extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCards: [],\r\n            currentViewedCard: exampleCards()[0],\r\n            searchFilterValue: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {        \r\n        fetch(\"https://db.ygoprodeck.com/api/v2/cardinfo.php\")\r\n        .then((response) => response.json())\r\n        .then( (json) => this.setState({allCards: json[0] }) )\r\n    }\r\n\r\n    handleCardClick = (card) => {\r\n        this.setState({currentViewedCard: card});\r\n    }\r\n\r\n    handleFilter = (searchObj) => {\r\n        this.setState({searchFilterValue: searchObj.searchFilterValue})\r\n    }\r\n\r\n    showingSomeOfAllCardsTitle = (numCards) => (\r\n        \"Showing \" + numCards + \" of \" + this.state.allCards.length + \" total cards.\"\r\n    )\r\n    \r\n    render() {\r\n        let cardActions;\r\n        if(!extraDeckTypes.includes(this.state.currentViewedCard['type'])){\r\n            cardActions = [\r\n                {text: 'To Main Deck', actionHandler: () => this.props.sendToHandler('deck', 'main', this.state.currentViewedCard)},\r\n                {text: 'To Main Trunk', actionHandler: () => this.props.sendToHandler('trunk', 'main', this.state.currentViewedCard)},\r\n                {text: 'To Side Deck', actionHandler: () => this.props.sendToHandler('deck', 'side', this.state.currentViewedCard)},\r\n                {text: 'To Side Trunk', actionHandler: () => this.props.sendToHandler('trunk', 'side', this.state.currentViewedCard)}\r\n            ]\r\n        }\r\n        else{\r\n            cardActions = [\r\n                {text: 'To Extra Deck', actionHandler: () => this.props.sendToHandler('deck', 'extra', this.state.currentViewedCard)},\r\n                {text: 'To Extra Trunk', actionHandler: () => this.props.sendToHandler('trunk', 'extra', this.state.currentViewedCard)},\r\n                {text: 'To Side Deck', actionHandler: () => this.props.sendToHandler('deck', 'side', this.state.currentViewedCard)},\r\n                {text: 'To Side Trunk', actionHandler: () => this.props.sendToHandler('trunk', 'side', this.state.currentViewedCard)}\r\n            ]\r\n        }\r\n        return (\r\n            <Card border=\"warning\" style={{ width: '360px' , height: '850px', position: 'absolute', top: '20px', left: '970px'}}>\r\n                <Card.Header>Search All Cards</Card.Header>\r\n                <Card.Body style={{padding: '9px'}}>\r\n                    <Row style={{height: '110px', marginTop: '10px'}}>\r\n                        <Col xs={6}>\r\n                            <SearchBar onFilter={this.handleFilter} />\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <CardActions cardActions={cardActions}/>\r\n                        </Col>\r\n                    </Row>  \r\n                    <Row style={{height: '450px'}}>\r\n                        <Col style={{height: '100%'}} xs={6}>\r\n                            <CardsSection \r\n                            totalCardsShownLimit={150}\r\n                            searchFilterValue={this.state.searchFilterValue} \r\n                            onCardClick={this.handleCardClick} \r\n                            cards={this.state.allCards} \r\n                            style={{ width: '100%', height: '100%' }} \r\n                            type=\"Main\"\r\n                            title={this.showingSomeOfAllCardsTitle}/>\r\n                        </Col>\r\n                        <Col style={{height: '100%'}} xs={6}>\r\n                            <CardViewer \r\n                            onCardImgClick={this.props.enlargedCardModalOpenHandler}\r\n                            cardData={this.state.currentViewedCard} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <CardsSection \r\n                            totalCardsShownLimit={150}\r\n                            searchFilterValue={this.state.searchFilterValue} \r\n                            onCardClick={this.handleCardClick} \r\n                            cards={this.state.allCards} \r\n                            style={{ width: '100%', height: '200px', marginTop: '10px'}} \r\n                            type=\"Extra\"\r\n                            title={this.showingSomeOfAllCardsTitle}/>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AllCardsControl;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst getCardIdArray = (cardArray) => (\r\n    cardArray.map(card => card.id)\r\n)\r\n\r\nconst getDeckControlObjWithCardIdsOnly = (deckControlObj) => (\r\n    {\r\n        main: getCardIdArray(deckControlObj.main),\r\n        side: getCardIdArray(deckControlObj.side),\r\n        extra: getCardIdArray(deckControlObj.extra)\r\n    }\r\n)\r\n\r\nconst creditsBox = (props) => {\r\n    const deckAndTrunkData = {\r\n        deck: getDeckControlObjWithCardIdsOnly(props.deck),\r\n        trunk: getDeckControlObjWithCardIdsOnly(props.trunk)\r\n    }\r\n    const deckAndTrunkString = JSON.stringify(deckAndTrunkData);\r\n    return (\r\n    <Container>\r\n        <Card bg=\"warning\" text=\"white\">\r\n            <Card.Header>Credits And Actions</Card.Header>\r\n            <Card.Body>\r\n                <Card.Title>Made with ReactJS</Card.Title>\r\n                <Button variant=\"dark\" block href=\"https://github.com/AiyazN25/ygo-deckbuilder/tree/master\">Source Code</Button>\r\n                Upload and download your deck+trunk data.\r\n                <Button as=\"a\" \r\n                href={'data:text/plain;charset=utf-8,' + encodeURIComponent(deckAndTrunkString)} \r\n                download='DeckAndTrunkData.txt'\r\n                variant=\"success\" block>Download Data</Button>\r\n                <input style={{display: 'inline-block', width: '100%', marginTop: '8px'}} \r\n                type=\"file\" \r\n                onChange={props.onDataUpload} accept='.txt'/>\r\n            </Card.Body>\r\n        </Card>\r\n    </Container>\r\n    \r\n)}\r\n\r\nexport default creditsBox;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst clearWarning = (props) => (\r\n    <Modal\r\n        {...props}\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n    >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Confirm Clear\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <p>\r\n                Are you sure you want to delete all cards from this section?\r\n           </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={props.onHide}>Cancel</Button>\r\n            <Button variant=\"danger\"\r\n                onClick={() => props.onClearButtonClick(\r\n                    props.whatWillBeCleared.whichDeckControl,\r\n                    props.whatWillBeCleared.whichCardsSection)}>\r\n                Clear\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n)\r\n\r\nexport default clearWarning;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst testHand = (props) => {\r\n    const cardsArray = [];\r\n    const totalCardsToShow = Math.min(props.cards.length, props.numCardsToShow);\r\n    for(let i=0; i < totalCardsToShow; i++){\r\n        let card = props.cards[i]\r\n        cardsArray.push(<img style={{width: '150px', margin: '10px'}} key={i} alt=\"card\" src={card['image_url']}/>)\r\n    }\r\n    return (<Modal\r\n        show={props.show}\r\n        onHide={props.onHide}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n    >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Sample Hand\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <p>\r\n                {cardsArray}\r\n            </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n            <Button onClick={props.onDraw} variant=\"primary\">\r\n                Draw\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>)\r\n}\r\n\r\nexport default testHand;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst enlargedCard = (props) => (\r\n    <Modal\r\n        {...props}\r\n        aria-labelledby=\"enlarged-card-modal\"\r\n    >\r\n        <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                Enlarged Card\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <img src={props.cardImg} alt='cardImg' style={{width: '400px', display: 'block', margin: 'auto'}}/>\r\n        </Modal.Body>\r\n    </Modal>\r\n)\r\n\r\nexport default enlargedCard","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Alert from 'react-bootstrap/Alert'\nimport LeftHeader from './components/LeftHeader/LeaftHeader';\nimport DeckControl from './components/DeckControl/DeckControl';\nimport AllCardsControl from './components/AllCardsControl/AllCardsControl';\nimport CreditsBox from './components/CreditsBox/CreditsBox';\nimport exampleCards from './assets/exampleCards';\nimport ClearWarningModal from './components/Modals/ClearWarning'\nimport TestHandModal from './components/Modals/TestHand';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport EnlargedCardModal from './components/Modals/EnlargedCard';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      trunk: {\n        main: [], mainSearchFilterValue: '',\n        side: [], sideSearchFilterValue: '',\n        extra: [], extraSearchFilterValue: '',\n        currentViewedCard: exampleCards()[1],\n        inWhichCardSectionCurrentCardViewedIs: null,\n        currentViewedCardIndex: null\n      },\n      deck: {\n        main: [], mainSearchFilterValue: '',\n        side: [], sideSearchFilterValue: '',\n        extra: [], extraSearchFilterValue: '',\n        currentViewedCard: exampleCards()[2],\n        inWhichCardSectionCurrentCardViewedIs: null,\n        currentViewedCardIndex: null\n      },\n      showClearWarningModal: false,\n      whatWillBeCleared: {\n        whichDeckControl: null,\n        whichCardsSection: null\n      },\n      showTestHandModal: false,\n      numCardsToShowInTestHand: 5,\n      sampleHand: [],\n      showUploadFailAlert: false,\n      showEnlargedCardModal: false,\n      enlargedCardToShow: null\n    }\n  }\n\n  componentDidUpdate = () => {\n    // console.log('NEWSTATE', this.state)\n  }\n\n  handleSendingCard = (toWhichDeckControl, toWhichCardSection, card, fromWhichDeckControl, fromWhichCardSection) => {\n    this.setState((prevState) => {\n      if (!fromWhichDeckControl) {\n        // Means we're sending a card from AllCardsSection to a DeckControl\n        const toModifiedDeckControl = { ...prevState[toWhichDeckControl] };\n        const toModifiedCardsSection = [...prevState[toWhichDeckControl][toWhichCardSection]];\n        toModifiedCardsSection.push(card);\n        toModifiedDeckControl[toWhichCardSection] = toModifiedCardsSection;\n        return { [toWhichDeckControl]: toModifiedDeckControl }\n      }\n\n      else if (toWhichDeckControl === null && toWhichCardSection === null) {\n        // Means we're deleting a card in a DeckControl\n        const fromModifiedDeckControl = { ...prevState[fromWhichDeckControl] };\n        const fromModifiedCardsSection = [...prevState[fromWhichDeckControl][fromWhichCardSection]];\n        const indexOfCardToRemove = fromModifiedDeckControl.currentViewedCardIndex;\n        fromModifiedCardsSection.splice(indexOfCardToRemove, 1);\n        fromModifiedDeckControl[fromWhichCardSection] = fromModifiedCardsSection;\n        fromModifiedDeckControl.currentViewedCard = null;\n        fromModifiedDeckControl.inWhichCardSectionCurrentCardViewedIs = null;\n        fromModifiedDeckControl.currentViewedCardIndex = null;\n        return { [fromWhichDeckControl]: fromModifiedDeckControl }\n      }\n\n      else if (toWhichDeckControl !== fromWhichDeckControl) {\n        // Means we're sending a card from a deckControl to a different deckControl\n        const toModifiedDeckControl = { ...prevState[toWhichDeckControl] };\n        const toModifiedCardsSection = [...prevState[toWhichDeckControl][toWhichCardSection]];\n        toModifiedCardsSection.push(card);\n        toModifiedDeckControl[toWhichCardSection] = toModifiedCardsSection;\n\n        const fromModifiedDeckControl = { ...prevState[fromWhichDeckControl] };\n        const fromModifiedCardsSection = [...prevState[fromWhichDeckControl][fromWhichCardSection]];\n        const indexOfCardToRemove = fromModifiedDeckControl.currentViewedCardIndex;\n        fromModifiedCardsSection.splice(indexOfCardToRemove, 1);\n        fromModifiedDeckControl[fromWhichCardSection] = fromModifiedCardsSection;\n        fromModifiedDeckControl.currentViewedCard = null;\n        fromModifiedDeckControl.inWhichCardSectionCurrentCardViewedIs = null;\n        fromModifiedDeckControl.currentViewedCardIndex = null;\n        return { [toWhichDeckControl]: toModifiedDeckControl, [fromWhichDeckControl]: fromModifiedDeckControl }\n      }\n      else if (toWhichDeckControl === fromWhichDeckControl) {\n        // Means we're sending a card from a deckControl to the same deckControl (to a different cardsSection)\n        const toModifiedDeckControl = { ...prevState[toWhichDeckControl] };\n        const toModifiedCardsSection = [...prevState[toWhichDeckControl][toWhichCardSection]];\n        toModifiedCardsSection.push(card);\n        toModifiedDeckControl[toWhichCardSection] = toModifiedCardsSection;\n\n        const fromModifiedCardsSection = [...prevState[fromWhichDeckControl][fromWhichCardSection]];\n        const indexOfCardToRemove = toModifiedDeckControl.currentViewedCardIndex;\n        fromModifiedCardsSection.splice(indexOfCardToRemove, 1);\n        toModifiedDeckControl[fromWhichCardSection] = fromModifiedCardsSection;\n        toModifiedDeckControl.currentViewedCard = null;\n        toModifiedDeckControl.inWhichCardSectionCurrentCardViewedIs = null;\n        toModifiedDeckControl.currentViewedCardIndex = null;\n        return { [toWhichDeckControl]: toModifiedDeckControl }\n      }\n    })\n  }\n\n  handleCardClicked = (inWhichDeckControl, card, cardIndex, inWhichCardSection) => {\n    // console.log('hCC', inWhichDeckControl, card, cardIndex, inWhichCardSection)\n    const modifiedDeckControl = { ...this.state[inWhichDeckControl] };\n    modifiedDeckControl.currentViewedCardIndex = cardIndex;\n    modifiedDeckControl.currentViewedCard = card;\n    modifiedDeckControl.inWhichCardSectionCurrentCardViewedIs = inWhichCardSection;\n    this.setState({ [inWhichDeckControl]: modifiedDeckControl })\n  }\n\n  handleCardsSectionSorting = (inWhichDeckControl, inWhichCardSection) => {\n    this.setState(\n      (prevState) => {\n        const modifiedDeckControl = { ...prevState[inWhichDeckControl] }\n        const modifiedCardsSection = [...prevState[inWhichDeckControl][inWhichCardSection]];\n        modifiedCardsSection.sort((a, b) => {\n          if (a.name < b.name) { return -1; }\n          if (a.name > b.name) { return 1; }\n          return 0;\n        })\n        modifiedDeckControl[inWhichCardSection] = modifiedCardsSection;\n        if (modifiedDeckControl.inWhichCardSectionCurrentCardViewedIs === inWhichCardSection) {\n          modifiedDeckControl.currentViewedCard = null;\n          modifiedDeckControl.inWhichCardSectionCurrentCardViewedIs = null;\n          modifiedDeckControl.currentViewedCardIndex = null;\n        }\n        return { [inWhichDeckControl]: modifiedDeckControl }\n      }\n    )\n  }\n\n  handleCardsSectionClearing = (inWhichDeckControl, inWhichCardSection) => {\n    this.setState(\n      (prevState) => {\n        const modifiedDeckControl = { ...prevState[inWhichDeckControl] }\n        modifiedDeckControl[inWhichCardSection] = [];\n        if (modifiedDeckControl.inWhichCardSectionCurrentCardViewedIs === inWhichCardSection) {\n          modifiedDeckControl.currentViewedCard = null;\n          modifiedDeckControl.inWhichCardSectionCurrentCardViewedIs = null;\n          modifiedDeckControl.currentViewedCardIndex = null;\n        }\n        return { [inWhichDeckControl]: modifiedDeckControl, showClearWarningModal: false }\n      }\n    )\n  }\n\n  handleCardsSectionFiltering = (searchObj) => {\n    this.setState(prevState => {\n      const inWhichDeckControl = searchObj.inWhichDeckControl;\n      const inWhichCardSection = searchObj.inWhichCardSection;\n      const searchFilterValue = searchObj.searchFilterValue;\n      const modifiedDeckControl = { ...prevState[inWhichDeckControl] }\n      if (inWhichCardSection === 'main') {\n        modifiedDeckControl.mainSearchFilterValue = searchFilterValue\n      }\n      else if (inWhichCardSection === 'side') {\n        modifiedDeckControl.sideSearchFilterValue = searchFilterValue\n      }\n      else {\n        modifiedDeckControl.extraSearchFilterValue = searchFilterValue\n      }\n      return { [inWhichDeckControl]: modifiedDeckControl }\n    })\n  }\n\n  handleClosingClearWarningModal = () => {\n    this.setState({\n      showClearWarningModal: false,\n      whatWillBeCleared: {\n        whichDeckControl: null,\n        whichCardsSection: null\n      }\n    })\n  }\n\n  handleOpeningClearWarningModal = (inWhichDeckControl, inWhichCardSection) => {\n    this.setState({\n      showClearWarningModal: true,\n      whatWillBeCleared: {\n        whichDeckControl: inWhichDeckControl,\n        whichCardsSection: inWhichCardSection\n      }\n    })\n  }\n\n  handleClosingTestHandModal = () => {\n    this.setState({ showTestHandModal: false, numCardsToShowInTestHand: 5 })\n  }\n\n  handleOpeningTestHandModal = () => {\n    this.setState({\n      showTestHandModal: true,\n      sampleHand: [...this.state.deck.main].sort(() => 0.5 - Math.random())\n    })\n  }\n\n  handleClosingEnlargedCardModal = () => {\n    this.setState({ showEnlargedCardModal: false })\n  }\n\n  handleOpeningEnlargedCardModal = (cardImgUrl) => {\n    this.setState({ showEnlargedCardModal: true, enlargedCardToShow: cardImgUrl })\n  }\n\n  handleCardDraw = () => {\n    this.setState((prevState) => ({ numCardsToShowInTestHand: ++prevState.numCardsToShowInTestHand }))\n  }\n\n  handleDeckAndTrunkDataUpload = (e) => {\n    e.persist();\n    fetch(\"https://db.ygoprodeck.com/api/v2/cardinfo.php\")\n      .then((response) => response.json())\n      .then((json) => {\n        const allCards = json[0];\n        const uploadedFile = e.target.files[0];\n        try {\n          const type = /text.*/\n          if (uploadedFile.type.match(type) && !uploadedFile.type.match(/text.javascript/)) {\n            var reader = new FileReader();\n            reader.onload = (e) => {\n              const uploadedTextFile = JSON.parse(e.target.result);\n              this.setState(prevState => {\n                const modifiedPrevState = { ...prevState }\n                const modifiedTrunk = { ...prevState.trunk }\n                const modifiedDeck = { ...prevState.deck }\n\n                modifiedDeck.main = uploadedTextFile.deck.main.map(cardId => (\n                  allCards.find(cardObj => cardObj.id === cardId)\n                ))\n                modifiedDeck.side = uploadedTextFile.deck.side.map(cardId => (\n                  allCards.find(cardObj => cardObj.id === cardId)\n                ))\n                modifiedDeck.extra = uploadedTextFile.deck.extra.map(cardId => (\n                  allCards.find(cardObj => cardObj.id === cardId)\n                ))\n\n                modifiedTrunk.main = uploadedTextFile.trunk.main.map(cardId => (\n                  allCards.find(cardObj => cardObj.id === cardId)\n                ))\n                modifiedTrunk.side = uploadedTextFile.trunk.side.map(cardId => (\n                  allCards.find(cardObj => cardObj.id === cardId)\n                ))\n                modifiedTrunk.extra = uploadedTextFile.trunk.extra.map(cardId => (\n                  allCards.find(cardObj => cardObj.id === cardId)\n                ))\n\n                modifiedPrevState.deck = modifiedDeck;\n                modifiedPrevState.trunk = modifiedTrunk;\n                return modifiedPrevState;\n              })\n            }\n            reader.readAsText(uploadedFile);\n          }\n          else {\n            throw new Error('Invalid file format uploaded')\n          }\n        }\n        catch (e) {\n          console.log(e);\n          this.setState({ showUploadFailAlert: true })\n        }\n\n      })\n  }\n\n  handleUploadAlertShow = () => {\n    this.setState({ showUploadFailAlert: true })\n  }\n\n  handleUploadAlertHide = () => {\n    this.setState({ showUploadFailAlert: false })\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'relative' }}>\n        <div style={{ width: '960px', display: 'inline-block' }}>\n          <Row>\n            <Col xs={3}>\n              <LeftHeader clickedTestHand={this.handleOpeningTestHandModal} />\n            </Col>\n            <Col xs={9}>\n              <DeckControl\n                enlargedCardModalOpenHandler={this.handleOpeningEnlargedCardModal}\n                filterCardsInSectionHandler={this.handleCardsSectionFiltering}\n                sortCardsInSectionHandler={this.handleCardsSectionSorting}\n                clearWarningModalOpenHandler={this.handleOpeningClearWarningModal}\n                sendToHandler={this.handleSendingCard}\n                cardClicked={this.handleCardClicked}\n                fullDeckData={this.state.deck}\n                title=\"Deck\" mainDeckLimit={60}\n                sideDeckLimit={15}\n                extraDeckLimit={15} />\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={3}>\n              <CreditsBox\n                deck={this.state.deck}\n                trunk={this.state.trunk}\n                onDataUpload={this.handleDeckAndTrunkDataUpload} />\n              <Container>\n                <Alert\n                  dismissible\n                  show={this.state.showUploadFailAlert}\n                  onClose={this.handleUploadAlertHide}\n                  variant='danger'>Something is wrong with the deck data you uploaded.</Alert>\n              </Container>\n\n            </Col>\n            <Col xs={9}>\n              <DeckControl\n                enlargedCardModalOpenHandler={this.handleOpeningEnlargedCardModal}\n                filterCardsInSectionHandler={this.handleCardsSectionFiltering}\n                sortCardsInSectionHandler={this.handleCardsSectionSorting}\n                clearWarningModalOpenHandler={this.handleOpeningClearWarningModal}\n                sendToHandler={this.handleSendingCard}\n                cardClicked={this.handleCardClicked}\n                fullDeckData={this.state.trunk}\n                title=\"Trunk\" />\n            </Col>\n          </Row>\n        </div>\n        <AllCardsControl\n          enlargedCardModalOpenHandler={this.handleOpeningEnlargedCardModal}\n          sendToHandler={this.handleSendingCard} />\n        <ClearWarningModal\n          show={this.state.showClearWarningModal}\n          onHide={this.handleClosingClearWarningModal}\n          whatWillBeCleared={this.state.whatWillBeCleared}\n          onClearButtonClick={this.handleCardsSectionClearing} />\n        <TestHandModal\n          show={this.state.showTestHandModal}\n          onHide={this.handleClosingTestHandModal}\n          cards={this.state.sampleHand}\n          numCardsToShow={this.state.numCardsToShowInTestHand}\n          onDraw={this.handleCardDraw} />\n        <EnlargedCardModal\n          cardImg={this.state.enlargedCardToShow}\n          show={this.state.showEnlargedCardModal}\n          onHide={this.handleClosingEnlargedCardModal} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}